/* This code decrypts texts within the EncryptedText file without having to know the key. It can be run in console or terminal and aquires the key then gives decrypted text*/ 

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define STR_LTH 26                                      //makes the length 26 so the word can be 26 letters long 

char decrypt(char *wrd, int key);                       //function prototype for decrypting the text based on a key

int main()
{
    char wrd[STR_LTH];                                  //declares string as char to turn letters into numbers 
    int key=0;
    FILE *EncryptedText;                                //sets a pointer to the file EncryptedText
    EncryptedText=fopen("EncryptedText.txt","r");       //opens and reads the file
    FILE *DecryptedText;                                //sets pointer to file DecryptedText
    DecryptedText=fopen("DecryptedText.txt","w");       //opens file to write into it
    
    while(!feof(EncryptedText))                         // while the file still has information to read the following code will be executed 
        {
            fscanf(EncryptedText,"%s",wrd);             //scans for characters then stores as string on wrd when it hits white space 
            if(wrd[0]==wrd[0] && (wrd[1]==wrd[0]-12 || wrd[1]==wrd[0]+26-12) && (wrd[2]==wrd[0]-15 || wrd[2]==wrd[0]+26-15) && wrd[3]=='\0')    //if a word is has three letters and is spaced in the same was as "THE" it is read as such and the key is received by taking the difference of the first charater to T 
            {
                if(wrd[0]<84)
                {
                    key=wrd[0]+26-84;
                }
                else if(wrd[0]>84)
                {
                    key=wrd[0]-84;
                }
                printf("The key is %d\n\n",key);           //reads the key as an integer 
                break;
            }
            else if(wrd[0]==wrd[0] && (wrd[1]==wrd[0]+13 || wrd[1]==wrd[0]+26+13) && (wrd[2]==wrd[0]+3 || wrd[2]==wrd[0]+26+3) && wrd[3]=='\0') // same method but for "AND". the more words the more reliable the code will be.
            {
                if(wrd[0]<65)
                {
                    key=wrd[0]+26-65;
                }
                else if(wrd[0]>65)
                {
                    key=wrd[0]-65;
                }
                printf("The key is %d\n\n",key);
                break;
            }
            else if(wrd[0]==wrd[0] && (wrd[1]==wrd[0]+3 || wrd[1]==wrd[0]+26+3) && wrd[2]=='\0')    //same method but for "BE". more words means more reliable 
            {
                if(wrd[0]<66)
                {
                    key=wrd[0]+26-66;
                }
                else if(wrd[0]>66)
                {
                    key=wrd[0]-66;
                }
                printf("The key is %d\n\n",key);
                break;
            }
            else if(wrd[0]==wrd[0] && (wrd[1]==wrd[0]-5 || wrd[1]==wrd[0]+26-5) && wrd[2]=='\0')    //same method for "TO"
            {
                if(wrd[0]<84)
                {
                    key=wrd[0]+26-84;
                }
                else if(wrd[0]>84)
                {
                    key=wrd[0]-84;
                }
                printf("The key is %d\n\n",key);
                break;
            }
        }
    
        fclose(EncryptedText);                              //closes file so that when it is read to decrypt the words it starts from the beggining again
        fclose(DecryptedText); 
        EncryptedText=fopen("EncryptedText.txt","r");       //reopens file at the start 
        DecryptedText=fopen("DecryptedText.txt","w");
        
    while(!feof(EncryptedText))                         // makes a loop so that while the file is still going the code will still decrypt the words
    {
        wrd[0]='\0';
        fscanf(EncryptedText,"%s",wrd);                 //reads a word in the file then stores it in a string wrd
        decrypt(wrd, key);                             //calls function to that string wrd and sends the information of the key       
        printf("%s ",wrd);                            //prints the decrypted text to the console
        fprintf(DecryptedText, "%s ",wrd);              //prints decrypted text to the file EncryptedText
    }
    printf("\n");                                       //prints new line to the console to stop cluttering of the screen 
    fprintf(DecryptedText, "\n");                       //prints new line to file
    fclose(EncryptedText);                              //closes file
    fclose(DecryptedText);                              //closes file
    

  return 0;
}

char decrypt(char *wrd, int key)
{
    
    int i=0;                                            //declares i as an int
    for(i = 0;i < STR_LTH;i++)                          //for thr length of the string 
    {
        if(wrd[i] == '\0')                              //if the word ends the code returns and goes onto the next word
        {
            return 0;
        }
        else if(((wrd[i]<65 && wrd[i]!=39) && (wrd[i]<65 && wrd[i]!=34))  || wrd[i]>90)                 //if the value of wrd[i] is punctuation, there will be no change
        {
            return 0;
        }
       
        wrd[i]=wrd[i]-key;                              //shifts char value of a letter value up by an amount changing it to a new letter
        
        if(wrd[i]+key==39)
        {
            wrd[i]=39;
        }
        if(wrd[i]+key==34)
        {
            wrd[i]=34;
        }
        if(wrd[i]>90)                                   //if the char value is above Z then it shifts it back to the start of the alphabet beginning with A 
        {
            wrd[i]=wrd[i]-26;
        }
        else if(wrd[i]<65 && wrd[i]!=34 && wrd[i]!=39)                              //if the char value is below A then it shifts it back to the end of the alphabet at Z
        {
            wrd[i]=wrd[i]+26;
        }
    }
    
    return 0;
}

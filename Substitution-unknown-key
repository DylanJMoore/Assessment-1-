#include <stdio.h>
#include <string.h>

#define STR_LTH 26

char decrypt(char *wrd, int key, char a, char b,char c,char d,char e,char f,char g,char h,char i,char j,char k,char l,char m,char n,char o,char p,char q,char r,char s,char t,char u,char v,char w,char x,char y,char z,char A,char B,char C,char D,char E,char F,char G,char H,char I,char J,char K,char L,char M,char N,char O,char P,char Q,char R,char S,char T,char U,char V,char W,char X,char Y,char Z); 

int main() 
{
    int key=0;
    char A=65,B=66,C=67,D=68,E=69,F=70,G=71,H=72,I=73,J=74,K=75,L=76,M=77,N=78,O=79,P=80,Q=81,R=82,S=83,T=84,U=85,V=86,W=87,X=88,Y=89,Z=90;
    char a=65,b=66,c=67,d=68,e=69,f=70,g=71,h=72,i=73,j=74,k=75,l=76,m=77,n=78,o=79,p=80,q=81,r=82,s=83,t=84,u=85,v=86,w=87,x=88,y=89,z=90;
    FILE *EncryptedText;                                //sets a pointer to the file TextToEncrypt
    EncryptedText=fopen("EncryptedText.txt","r");       //opens and reads the file
    FILE *DecryptedText;
    DecryptedText=fopen("DecryptedText.txt","w");
    char wrd[STR_LTH]; 
          
    while(!feof(EncryptedText))
    {
        fscanf(EncryptedText,"%s",wrd);
        if(strlen(wrd)==1)
        {
            A=wrd[0];
            
            printf("%c  =>   A\n",wrd[0]);
        }
        if(strlen(wrd)==3 && wrd[0]==A)
        {
            N=wrd[1];
            printf("%c  =>   N\n",wrd[1]);
            D=wrd[2];
            printf("%c  =>   D\n",wrd[2]);
        }
        if(strlen(wrd)==3 && wrd[0]!=A)
        {
            T=wrd[0];
            printf("%c  =>   T\n",wrd[0]);
            H=wrd[1];
            printf("%c  =>   H\n",wrd[1]);
            E=wrd[2];
            printf("%c  =>   E\n",wrd[2]);
        }
        if(strlen(wrd)==2 && wrd[0]==T)
        {
           O=wrd[1];
           printf("%c  =>   O\n",wrd[1]);
        }
        if(strlen(wrd)==2 && wrd[1]==O)
        {
            F=wrd[1];
            printf("%c  =>   F\n",wrd[1]);
        }
        if(strlen(wrd)==4 && wrd[0]==H && wrd[1]==A && wrd[3]==E)
        {
            V=wrd[2];
            printf("%c  =>   V\n",wrd[2]);
        }
        if(strlen(wrd)==2 && wrd[0]!=A && wrd[1]==T)
        {
            I=wrd[0];
            printf("%c  =>   I\n",wrd[0]);
        }
        if(strlen(wrd)==2 && wrd[1]==E)
        {
            B=wrd[0];
            printf("%c  =>   B\n",wrd[0]);
        }
        if(strlen(wrd)==4 && wrd[1]==I && wrd[2]==T && wrd[3]==H)
        {
            W=wrd[0];
            printf("%c  =>   W\n",wrd[0]);
        }
        if(strlen(wrd)==2 && wrd[0]==A)
        {
            S=wrd[1];
            printf("%c  =>   S\n",wrd[1]);
        }
        if(strlen(wrd)==3 && wrd[1]==O)
        {
            Y=wrd[0];
            printf("%c  =>   Y\n",wrd[0]);
            U=wrd[2];
            printf("%c  =>   U\n",wrd[2]);
        }
        if(strlen(wrd)==3 && wrd[0]==F && wrd[1]==O)
        {
            R=wrd[2];
            printf("%c  =>   R\n",wrd[1]);
        }
    }
    printf("\n");
    fclose(EncryptedText);                              //closes file
    fclose(DecryptedText); 
    EncryptedText=fopen("EncryptedText.txt","r");
    DecryptedText=fopen("DecryptedText.txt","w");
    if(key==0)
    {
        while(!feof(EncryptedText))                         // makes a loop so that while the file is still going
        {
            fscanf(EncryptedText,"%s",wrd);                 //reads a word in the file then stores it in a string
            decrypt(wrd, key, a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z);                             //calls function to that string       
            printf("%s ",wrd);                              //prints the encrypted text to the console
            fprintf(DecryptedText, "%s ",wrd);              //prints encrypted text to the file EncryptedText
        }
    printf("\n");
    fclose(EncryptedText);                              //closes file
    fclose(DecryptedText);   
    }
    else
    {
        printf("Try again using a non-zero number\n");
    }

  return 0;
}	

char decrypt(char *wrd, int key, char a,char b,char c,char d,char e,char f,char g,char h,char i,char j,char k,char l,char m,char n,char o,char p,char q,char r,char s,char t,char u,char v,char w,char x,char y,char z,char A,char B,char C,char D,char E,char F,char G,char H,char I,char J,char K,char L,char M,char N,char O,char P,char Q,char R,char S,char T,char U,char V,char W,char X,char Y,char Z)

{
    int count=0;                                            //declares i as an int
    
    for(count = 0;count < STR_LTH;count++)                          //for thr length of the string 
    {
       switch(count)
       {
        case 65:    wrd[count]= a;
                    break;
        case 66:    wrd[count]= b;
                    break;
        case 67:    wrd[count]= c;
                    break;
        case 68:    wrd[count]= d;
                    break;
        case 69:    wrd[count]= e;
                    break;
        case 70:    wrd[count]= f;
                    break;
        case 71:    wrd[count]= g;
                    break;
        case 72:    wrd[count]= h;
                    break;
        case 73:    wrd[count]= i;
                    break;
        case 74:    wrd[count]= j;
                    break;
        case 75:    wrd[count]= k;
                    break;
        case 76:    wrd[count]= l;
                    break;
        case 77:    wrd[count]= m;
                    break;
        case 78:    wrd[count]= n;
                    break;
        case 79:    wrd[count]= o;
                    break;
        case 80:    wrd[count]= p;
                    break;
        case 81:    wrd[count]= q;
                    break;
        case 82:    wrd[count]= r;
                    break;
        case 83:    wrd[count]= s;
                    break;
        case 84:    wrd[count]= t;
                    break;
        case 85:    wrd[count]= u;
                    break;
        case 86:    wrd[count]= v;
                    break;
        case 87:    wrd[count]= w;
                    break;
        case 88:    wrd[count]= x;
                    break;
        case 89:    wrd[count]= y;
                    break;
        case 90:    wrd[count]= z;
                    break;
            
       default: break;
        }

    }
    return 0;
}

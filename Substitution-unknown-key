#include <stdio.h>
#include <string.h>

#define STR_LTH 26

char decrypt(char *wrd, int key, char *a,*b,*c,*d,*e,*f,*g,*h,*i,*j,*k,*l,*m,*n,*o,*p,*q,*r,*s,*t,*u,*v,*w,*x,*y,*z); 

int main() 
{
    int key=0;
    char a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;
    int answer=0;
    FILE *EncryptedText;                                //sets a pointer to the file TextToEncrypt
    EncryptedText=fopen("EncryptedText.txt","r");       //opens and reads the file
    FILE *DecryptedText;
    DecryptedText=fopen("DecryptedText.txt","w");
    char wrd[STR_LTH]; 
    
    
    printf("Enter the letter that the letter above has been subsitituted for\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n| | | | | | | | | | | | | | | | | | | | | | | | | |\nV V V V V V V V V V V V V V V V V V V V V V V V V V\n");
    scanf("%c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c",&a,&b,&c,&d,&e,&f,&g,&h,&i,&j,&k,&l,&m,&n,&o,&p,&q,&r,&s,&t,&u,&v,&w,&x,&y,&z);

    while(!feof(EncryptedText))
    {
        fscanf(EncryptedText,"%s",wrd);
        if(strlen(wrd)==2)
        {
            wrd[0]==a;
            printf("%c = A\n",wrd[0]);
        }
        if(strlen(wrd)==4 && wrd[0]==a)
        {
            wrd[1]==n;
            printf("%c = N\n",wrd[1]);
            wrd[2]==d;
            printf("%c = D\n",wrd[2]);
        }
        if(strlen(wrd)==4 && wrd[0]!=a)
        {
            wrd[0]==t;
            printf("%c = T\n",wrd[0]);
            wrd[1]==h;
            printf("%c = H\n",wrd[1]);
            wrd[2]==e;
            printf("%c = E\n",wrd[2]);
        }
        if(strlen(wrd)==3 && wrd[0]==t)
        {
           wrd[1]==o;
           printf("%c = O\n",wrd[1]);
        }
        if(strlen(wrd)==3 && wrd[1]==o)
        {
            wrd[1]==f;
            printf("%c = F\n",wrd[1]);
        }
        if(strlen(wrd)==5 && wrd[0]==h && wrd[1]==a && wrd[3]==e)
        {
            wrd[2]==v;
            printf("%c = V\n",wrd[2]);
        }
        if(strlen(wrd)==3 && wrd[0]!=a && wrd[1]==t)
        {
            wrd[0]==i;
            printf("%c = I\n",wrd[0]);
        }
        if(strlen(wrd)==3 && wrd[1]==e)
        {
            wrd[0]==b;
            printf("%c = B\n",wrd[0]);
        }
        if(strlen(wrd)==5 && wrd[1]==i && wrd[2]==t && wrd[3]==h)
        {
            wrd[0]==w;
            printf("%c = W\n",wrd[0]);
        }
        if(strlen(wrd)==3 && wrd[0]==a)
        {
            wrd[1]==s;
            printf("%c = S\n",wrd[1]);
        }
        if(strlen(wrd)==4 && wrd[1]==o)
        {
            wrd[0]==y;
            printf("%c = Y\n",wrd[0]);
            wrd[2]==u;
            printf("%c = U\n",wrd[2]);
        }
        if(strlen(wrd)==4 && wrd[0]==f && wrd[1]==o)
        {
            wrd[2]==r;
            printf("%c = R\n",wrd[1]);
        }
    }

    fclose(EncryptedText);                              //closes file
    fclose(DecryptedText); 

    if(key==0)
    {
        while(!feof(EncryptedText))                         // makes a loop so that while the file is still going
        {
            fscanf(EncryptedText,"%s",wrd);                 //reads a word in the file then stores it in a string
            decrypt(wrd, key);                             //calls function to that string       
            printf("%s ",wrd);                              //prints the encrypted text to the console
            fprintf(DecryptedText, "%s ",wrd);              //prints encrypted text to the file EncryptedText
        }
    printf("\n");
    fclose(EncryptedText);                              //closes file
    fclose(DecryptedText);   
    }
    else
    {
        printf("Try again using a non-zero number\n");
    }

  return 0;
}	

char decrypt(char *wrd, int key, char *a,*b,*c,*d,*e,*f,*g,*h,*i,*j,*k,*l,*m,*n,*o,*p,*q,*r,*s,*t,*u,*v,*w,*x,*y,*z)
{
   int i=0;                                            //declares i as an int
    
    for(i = 0;i < STR_LTH;i++)                          //for thr length of the string 
    {
       switch(wrd[i])
       {
        case 65:    wrd[i]= a;
                    break;
        case 66:    wrd[i]= b;
                    break;
        case 67:    wrd[i]= c;
                    break;
        case 68:    wrd[i]= d;
                    break;
        case 69:    wrd[i]= e;
                    break;
        case 70:    wrd[i]= f;
                    break;
        case 71:    wrd[i]= g;
                    break;
        case 72:    wrd[i]= h;
                    break;
        case 73:    wrd[i]= i;
                    break;
        case 74:    wrd[i]= j;
                    break;
        case 75:    wrd[i]= k;
                    break;
        case 76:    wrd[i]= l;
                    break;
        case 77:    wrd[i]= m;
                    break;
        case 78:    wrd[i]= n;
                    break;
        case 79:    wrd[i]= o;
                    break;
        case 80:    wrd[i]= p;
                    break;
        case 81:    wrd[i]= q;
                    break;
        case 82:    wrd[i]= r;
                    break;
        case 83:    wrd[i]= s;
                    break;
        case 84:    wrd[i]= t;
                    break;
        case 85:    wrd[i]= u;
                    break;
        case 86:    wrd[i]= v;
                    break;
        case 87:    wrd[i]= w;
                    break;
        case 88:    wrd[i]= x;
                    break;
        case 89:    wrd[i]= y;
                    break;
        case 90:    wrd[i]= z;
                    break;
            
       default: break;
        }

    }
    return 0;
}

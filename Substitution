// this code enbles you to encrypt and decrypt files with substitution encryption. it must be ran through terminal

#include <stdio.h>
#include <string.h>

#define STR_LTH 26

char Cypher(char *wrd, char a,char b,char c,char d,char e,char f,char g,char h,char i,char j,char k,char l,char m,char n,char o,char p,char q,char r,char s,char t,char u,char v,char w,char x,char y,char z);                       //function prototype for the encryption/decryption

int main() 
{
    int answer=0;                                               //sets up variable for user input
    char a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;   //declares each letter to allow the program to assign the substitution letters to
    FILE *Input;                                                //sets a pointer to the file named input so it can read the message 
    Input=fopen("Input.txt","r");                               //opens and sets up the file to read the contents 
    FILE *Output;                                               //sets a pointer to the file named output so it can convert the message 
    Output=fopen("Output.txt","w");                             //opens the file to write the results to it
    char wrd[STR_LTH];                                          //declares a string to store each word on to then get read
   
    printf("Would you like to\n(1)Encrypt\nOr\n(2)Decrypt\n\n");      //prompts the user to make a decsicion to encrypt their input or decrypt it
    scanf("%d",&answer);                                               // reads the users answer 
    if (answer==1)                                                      //if they choose to encrypt by typing 1 the following message will appear and ask for an input 
    {
    printf("Enter a letter that the letter above will be subsitituted for\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n| | | | | | | | | | | | | | | | | | | | | | | | | |\nV V V V V V V V V V V V V V V V V V V V V V V V V V\n");
    scanf("%c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c",&a,&b,&c,&d,&e,&f,&g,&h,&i,&j,&k,&l,&m,&n,&o,&p,&q,&r,&s,&t,&u,&v,&w,&x,&y,&z);

    }
    else if(answer==2)                                                  //if they want to decrypt by pressing 2, this will come up asking about for the key of the substitution
    {
    printf("Enter the letter that the letter above has been subsitituted for\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^\n| | | | | | | | | | | | | | | | | | | | | | | | | |\n");
    scanf("%c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c %c",&a,&b,&c,&d,&e,&f,&g,&h,&i,&j,&k,&l,&m,&n,&o,&p,&q,&r,&s,&t,&u,&v,&w,&x,&y,&z);
    }
    else if(answer!=1 || answer!=2)                                     //if the user doesnt enter anything or the answer is not a one or a two it will help them by suggesting to enter a new number 
    {
        printf("Enter a one or a two\n(1) for Encrypting\n(2) for Decrypting");      
    }
      
   
    while(!feof(Input))                         // makes a loop so that it reads a word then acts on it then goes to the next word, this continues until the file ends  
    {
        fscanf(Input,"%s",wrd);                                                                             //reads a word in the file then stores it into the strin wrd
        Cypher(wrd,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z);                               //calls function on the string      
        printf("%s ",wrd);                                                                                  //prints the output text to the console
        fprintf(Output, "%s ",wrd);                                                                         //prints text to the Output.txt
    }
    fclose(Input);                              //closes both files to stop an to allow the program to end
    fclose(Output);   

  return 0;                                     //closes program
}	

char Cypher(char *wrd, char a,char b,char c,char d,char e,char f,char g,char h,char i,char j,char k,char l,char m,char n,char o,char p,char q,char r,char s,char t,char u,char v,char w,char x,char y,char z)  
{
    
    int count=0;                                            //declares count as an int to be able to navigate through the string and also count how long the string is
    
    for(count = 0;count < STR_LTH;count++)                  //for the length of the string the following code will be executed
    {
       switch(wrd[count])                                   //creates a switch that checks the first letter then goes to the case where it is equal to that letter then changes it to the new value of it given by the user 
       {
        case 65:    wrd[count]= a;
                    break;
        case 66:    wrd[count]= b;
                    break;
        case 67:    wrd[count]= c;
                    break;
        case 68:    wrd[count]= d;
                    break;
        case 69:    wrd[count]= e;
                    break;
        case 70:    wrd[count]= f;
                    break;
        case 71:    wrd[count]= g;
                    break;
        case 72:    wrd[count]= h;
                    break;
        case 73:    wrd[count]= i;
                    break;
        case 74:    wrd[count]= j;
                    break;
        case 75:    wrd[count]= k;
                    break;
        case 76:    wrd[count]= l;
                    break;
        case 77:    wrd[count]= m;
                    break;
        case 78:    wrd[count]= n;
                    break;
        case 79:    wrd[count]= o;
                    break;
        case 80:    wrd[count]= p;
                    break;
        case 81:    wrd[count]= q;
                    break;
        case 82:    wrd[count]= r;
                    break;
        case 83:    wrd[count]= s;
                    break;
        case 84:    wrd[count]= t;
                    break;
        case 85:    wrd[count]= u;
                    break;
        case 86:    wrd[count]= v;
                    break;
        case 87:    wrd[count]= w;
                    break;
        case 88:    wrd[count]= x;
                    break;
        case 89:    wrd[count]= y;
                    break;
        case 90:    wrd[count]= z;
                    break;
            
       default: break;                              //if the charater read is punctuation it is not changed
        }

    }
    return 0;
}
